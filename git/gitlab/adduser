#!/usr/bin/python3

from __future__ import print_function
from json import load, dump
from os.path import exists
from subprocess import check_call
import requests
import sys


class App:

    def __init__(self, token, base_url):
        self.token = token
        self.base_url = base_url
        self._api_headers = {
            'PRIVATE-TOKEN': self.token,
            'ACCEPT': 'application/json'
        }

    def create_user(self, username):
        data = {
            'email': '%s@example.com' % username,
            'password': username,
            'username': username,
            'name': username
        }

        response = requests.post(self.base_url + '/users',
                                 data=data,
                                 headers=self._api_headers)

        return response

    def add_default_key(self, username, user_id):
        keyname = '%s_key' % username
        check_call(['ssh-keygen',
                    '-f', keyname,
                    '-N', '',
                    '-C', 'key-%s' % username])
        with open('%s.pub' % keyname) as fp:
            public_key = fp.read()

        data = {
            'id': user_id,
            'title': 'Autogenerated Key',
            'key': public_key
        }

        response = requests.post(self.base_url + '/users/%d/keys' % user_id,
                                 data=data,
                                 headers=self._api_headers)
        return response

    def create_user_with_key(self, username):
        res = self.create_user(username)
        if res.status_code < 400:
            user_id = res.json()['id']
            print('User %s created with ID %d' % (username, user_id,))
            print('Adding key...')
            key_response = self.add_default_key(username, user_id)
            if key_response.status_code < 400:
                print('Key successfully added')
            else:
                print(key_response.content)
        else:
            print(res.content)


def main():

    if len(sys.argv) < 2:
        print('Synopsis: %s <username>' % sys.argv[0], file=sys.stderr)
        return 1

    cred_file = 'gitlab_redentials.json'
    if exists(cred_file):
        credentials = load(open(cred_file))
    else:
        credentials = {
            'token': input('Gitlab Access Token: ').strip(),
            'base_url': input('Gitlab base URL (up to, and including api '
                              'version, f. ex.: http://gl/api/v3): ').strip()

        }

    app = App(**credentials)
    app.prompt_gg
    app.create_user_with_key(sys.argv[1])

    dump(credentials, open(cred_file, 'w'))
    print('Credentials stored to %s' % cred_file)


if __name__ == '__main__':
    sys.exit(main())
